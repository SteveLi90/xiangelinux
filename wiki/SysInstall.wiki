#labels Featured
#安装弦歌Linux

= 0.简介 =

本文介绍了安装弦歌Linux的步骤。


= 1.安装需求 =

||硬件需求||任何Linux支持的硬件系统，目前只在PC机上测试<br>5G以上的硬盘空间<br>128MB以上的内存||
    

= 2.安装方式 =
弦歌Linux支持2种安装方式: 手动安装和自动脚本安装。无论何种方式，都调用弦歌的包管理系统gpkg, 请参见文档[xgpkg].

= 3.手动安装 =
手动安装即通过手动的方式安装所有软件包，如先调用gpkg -i linux-header 安装所有Linux头文件， 再调用gpkg -i glibc 安装C库， 再调用gpkg -i bin-utils安装二进制工具链。安装的步骤和LFS手册类似，只是细节交给gpkg处理。

具体步骤如下:
===3.1 准备主分区 ===

    * 首先需要一个主分区，至少5G以上。可以用fdisk/cfdisk从硬盘空闲空间生成，也可以使用现有无用分区。
    * 格式化主分区, 推荐使用ext4. 
    * 挂载到/mnt/xg 目录，作为工作目录。
    * 如果不想使用分区， 可以直接找一个目录代替，如~/xg, 作为工作目录。

===3.2 准备交换分区 ===
    * 弦歌系统基于源码安装，有大量的编译工作，如果有多于1GB的内存, 且启动tmpfs, 编译工作在tmpfs(可以理解为内存)中完成，可以大大提高编译速度，延长硬盘使用寿命。
    * tmpfs需要3G左右，如果你有2G内存，再加上1G的交换分区即可。
    * 用fdisk/cfdisk创建一个交换分区，然后用mkswap/swapon命令启动。
    * 也可以用文件代替交换分区，只是性能不如直接使用交换分区。
    * 交换分区启动后， 可以执行free命令看看容量:
{{{
free
             total       used       free     shared    buffers     cached
Mem:       2073332     375920    1697412          0      21224     159492
-/+ buffers/cache:     195204    1878128
Swap:     10738048          0   10738048
}}}

    * 有足够大空间的化， 可以在/etc/fstab里启动tmpfs
{{{
tmpfs           /dev/shm        tmpfs   defaults,size=10G       0       0
}}}

    * 挂载/dev/shm后，执行df -h命令， 可以看到:
{{{
sword@OPSvr ~ $df -h
文件系统              容量  已用 可用 已用% 挂载点
/dev/sdb7              97G  7.1G   85G   8% /
/dev/sdb6             100G   25G   76G  25% /mnt/bak
tmpfs                  10G  8.0K   10G   1% /dev/shm
}}}

    * 接着将tmpfs挂接到工作目录:
{{{
mkdir /dev/shm/xgtmp
chmod 1777 /dev/shm/xgtmp
mkdir /mnt/xg/tmp
mount --bind /dev/shm/xgtmp /mnt/xg/tmp
}}}

===3.3 准备工具链 (/tools目录) ===
    * 可以直接下载工具链，在根目录解压，即可跳过此步骤。[http://xiangelinux.googlecode.com/files/xgstage0-bin.tar.bz2 xgstage0-bin下载] 76MB
        # MD5Sum: 3abcb26015006f5347f989113436addb  xgstage0-bin.tar.bz2
        # sha256sum: 3f864041ba0084c666f1a33bf8df3d41e806e6bcce6a858816afeb60565e7553  xgstage0-bin.tar.bz2
        # 解压到工作目录即可进入继续3.4

    * 若想自己重新编译工具链，步骤如下:
        # 下载编译脚本 [http://xiangelinux.googlecode.com/files/xgstage0-0.10.4.tar.bz2 xgstage0-0.10.4.tar.bz2] 7.8KB
        # 在工作目录解压, 得到xgstage0-0.10.4目录。进入后执行./download，脚本会自动下载所需软件包源码
        # 如果失败，可以手动下载源码到工作目录的var/xiange/sources子目录, 如 /mnt/xg/var/xiange/sources/abc.tar.bz2. 再次运行./download, 会跳过已下载的软件包。
        # 下载成功后，执行./build, 构建工具链。
        # 完成后，会得到一个完整的工具链，在/mnt/xg/tools目录下。里面有记录文件installed.log, 记录了每个软件包的名称和安装时间。
        # 其实..也不必完全等代./download下载完毕再执行./build. 下载完gcc后就可以执行了，然后边下载边编译，节省时间。
        # 彻底编译完成后, 可以删除xgstage0-0.10.4目录

    安装工具列表: (名称-版本/安装时间, 在/mnt/xg/tools/installed.log)
{{{
binutils-2.19.1 2010-04-16 15:46:44
gcc-4.4.0 2010-04-16 17:09:43
linux-2.6.32.11 2010-04-16 17:10:22
glibc-2.10.1 2010-04-16 17:30:07
tcl8.5.7 2010-04-16 17:31:23
expect-5.43 2010-04-16 17:31:33
dejagnu-1.4.4 2010-04-16 17:31:41
gcc-4.4.0-pass2 2010-04-16 17:53:10
binutils-2.19.1-pass2 2010-04-16 17:56:39
ncurses-5.7 2010-04-16 17:58:54
bash-4.0 2010-04-16 18:02:48
bzip2-1.0.5 2010-04-16 18:02:54
coreutils-7.4 2010-04-16 10:05:01
diffutils-2.8.1 2010-04-16 10:05:23
e2fsprogs-1.41.7 2010-04-16 10:06:23
findutils-4.4.2 2010-04-16 10:07:47
gawk-3.1.6 2010-04-16 10:08:21
gettext-0.17 2010-04-16 10:10:38
grep-2.5.4 2010-04-16 10:10:58
gzip-1.3.12 2010-04-16 10:11:14
m4-1.4.13 2010-04-16 10:11:52
make-3.81 2010-04-16 10:12:14
patch-2.5.9 2010-04-16 10:12:28
perl-5.10.0 2010-04-16 10:14:37
sed-4.2.1 2010-04-16 10:14:59
tar-1.22 2010-04-16 10:15:52
texinfo-4.13 2010-04-16 10:16:30
util-linux-ng-2.15.1 2010-04-16 10:16:52
zlib-1.2.3 2010-04-16 10:16:57
git-1.6.3.3 2010-04-16 10:18:13
wget-1.11.4 2010-04-16 10:18:34
gpkg-0.10.4 2010-04-16 10:18:34
}}}
    gpkg-0.10.4 可以从本站下载。


    
        

===3.4 chroot到工作环境 ===
    * 拷贝/etc/resolv.conf 到/mnt/xg/etc目录, 保证chroot后可以访问网络。
    * 创建两个必需的设备文件: console和null. mknode -m 600 console c 5 1 和 mknode -m 666 null 1 3
    * 可以将一下命令写入脚本 doxg, 以后每次执行chroot时都需要做这些..
{{{
       
        mount /dev/XXXX /mnt/xg

        #copy resolv.conf
        [ -d /mnt/xg/etc ] || mkdir /mnt/xg/etc
        [ -f /mnt/xg/etc/resolv.conf ] || cp /etc/resolv.conf /mnt/xg/etc

        #create console and null
        [ -d /mnt/xg/dev ] || mkdir /mnt/xg/dev
        [ -f /mnt/xg/dev/console ] || mknode -m 600 /mnt/xg/dev/console c 5 1
        [ -f /mnt/xg/dev/null ] || mknode -m 666 /mnt/xg/dev/null c 1 3

        #mount proc,sys,dev
        mkdir -p /mnt/xg/proc
        mkdir -p /mnt/xg/sys
        mkdir -p /mnt/xg/dev
        mount -t proc none /mnt/xg/proc
        mount -t sysfs none /mnt/xg/sys
        mount --bind /dev /mnt/xg/dev


        #tmp fs
        mkdir /dev/shm/xgtmp
        chmod 1777 /dev/shm/xgtmp
        mkdir /mnt/xg/tmp
        mount --bind /dev/shm/xgtmp /mnt/xg/tmp

        echo "xg: Mount OK"
        #chroot
        chroot /mnt/xg /tools/bin/env -i \
                HOME=/root TERM="$TERM" PS1='\u:\w\$ ' \
                PATH=/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin \                
               /tools/bin/bash +h
}}}

      成功后，能看到如下信息:
{{{
I have no name!:/# ls
dev  lost+found  proc  sys  tmp  tools	var  xgstage0-0.10.4
I have no name!:/# 

}}}



===3.5 更新编译脚本库 ===
    * 在chroot的环境里,执行gpkg --sync, 可以看到如下信息:
{{{
I have no name!:/etc# gpkg --sync
Initialized empty Git repository in /var/xiange/xglibs/.git/
remote: Counting objects: 26, done.
remote: Compressing objects: 100% (20/20), done.
remote: Total 26 (delta 5), reused 0 (delta 0)
Receiving objects: 100% (26/26), done.
Resolving deltas: 100% (5/5), done.
I have no name!:/etc# 

}}}

    * 如果失败,是网络连接问题,请检查网络连接和/etc/resolv.conf

===3.6 安装baselayout ===
    * 执行gpkg -s base 检查能否从库中找到baselayout
{{{
I have no name!:/var/xiange/xglibs# gpkg -s base
* sys-apps/baselayout
	Available:	 0.2.0
	Installed:	 None

search base, result count 1
I have no name!:/var/xiange/xglibs# 
}}}

    * 执行gpkg -i baselayout 安装baselayout, 系统会自动下载安装,信息如下:
{{{
I have no name!:/# gpkg -i baselayout
Begin download baselayout-0.2.0...
downloading from http://xiangelinux.googlecode.com/files/baselayout-0.2.0.tar.bz2, retry 0...
--2010-04-16 11:00:57--  http://xiangelinux.googlecode.com/files/baselayout-0.2.0.tar.bz2
Resolving xiangelinux.googlecode.com... 72.14.203.82
Connecting to xiangelinux.googlecode.com|72.14.203.82|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 890 [application/x-bzip2]
Saving to: `/var/xiange/sources/baselayout-0.2.0.tar.bz2.tmp'

100%[========================================>] 890         --.-K/s   in 0.002s  

2010-04-16 11:00:57 (418 KB/s) - `/var/xiange/sources/baselayout-0.2.0.tar.bz2.tmp' saved [890/890]

Download OK
[Unpack] dir=/tmp/xiange/sources
`/bin/sh' -> `/tools/bin/bash'
# make all directorys.
Install to /tmp/xiange/pack/baselayout-0.2.0
`/tmp/xiange/pack/baselayout-0.1.0/usr/man' -> `share/man'
`/tmp/xiange/pack/baselayout-0.1.0/usr/doc' -> `share/doc'
`/tmp/xiange/pack/baselayout-0.1.0/usr/info' -> `share/info'
`/tmp/xiange/pack/baselayout-0.1.0/usr/local/man' -> `share/man'
`/tmp/xiange/pack/baselayout-0.1.0/usr/local/doc' -> `share/doc'
`/tmp/xiange/pack/baselayout-0.1.0/usr/local/info' -> `share/info'
# password/group
Done
Install files to / ...
Install OK
`/bin/bash' -> `/tools/bin/bash'
`/bin/cat' -> `/tools/bin/cat'
`/bin/echo' -> `/tools/bin/echo'
`/bin/grep' -> `/tools/bin/grep'
`/bin/pwd' -> `/tools/bin/pwd'
`/bin/stty' -> `/tools/bin/stty'
`/usr/bin/perl' -> `/tools/bin/perl'
`/usr/lib/libgcc_s.so' -> `/tools/lib/libgcc_s.so'
`/usr/lib/libgcc_s.so.1' -> `/tools/lib/libgcc_s.so.1'
`/usr/lib/libstdc++.so' -> `/tools/lib/libstdc++.so'
`/usr/lib/libstdc++.so.6' -> `/tools/lib/libstdc++.so.6'
`/bin/sh' -> `bash'
I have no name!:/# 

}}}

    * 安装完毕后，执行gpkg -I 检查所有已经安装的软件包, 可以看到安装时间, 包大小, 和名称/版本.
{{{
I have no name!:/# gpkg -I
2010-04-16 11:00:58      1K baselayout-0.2.0
I have no name!:/# 

}}}
    * 执行 gpkg -l baselayout列出包中所有文件。
{{{
I have no name!:/# gpkg -l baselayout
d|      240| /usr
l|       10| /usr/info
l|        9| /usr/doc
l|        9| /usr/man
d|      180| /usr/share
d|       40| /usr/share/zoneinfo
d|       40| /usr/share/terminfo
d|       40| /usr/share/misc
d|      200| /usr/share/man
d|       40| /usr/share/man/man8
d|       40| /usr/share/man/man7
d|       40| /usr/share/man/man6
d|       40| /usr/share/man/man5
d|       40| /usr/share/man/man4
d|       40| /usr/share/man/man3
d|       40| /usr/share/man/man2
d|       40| /usr/share/man/man1
d|       40| /usr/share/locale
d|       40| /usr/share/info
d|       40| /usr/share/doc
d|      220| /usr/local
l|       10| /usr/local/info
l|        9| /usr/local/doc
l|        9| /usr/local/man
d|      180| /usr/local/share
d|       40| /usr/local/share/zoneinfo
d|       40| /usr/local/share/terminfo
d|       40| /usr/local/share/misc
d|      200| /usr/local/share/man
d|       40| /usr/local/share/man/man8
d|       40| /usr/local/share/man/man7
d|       40| /usr/local/share/man/man6
d|       40| /usr/local/share/man/man5
d|       40| /usr/local/share/man/man4
d|       40| /usr/local/share/man/man3
d|       40| /usr/local/share/man/man2
d|       40| /usr/local/share/man/man1
d|       40| /usr/local/share/locale
d|       40| /usr/local/share/info
d|       40| /usr/local/share/doc
d|       40| /usr/local/src
d|       40| /usr/local/sbin
d|       40| /usr/local/lib
d|       40| /usr/local/include
d|       40| /usr/local/bin
d|       40| /usr/src
d|       40| /usr/sbin
d|       40| /usr/lib
d|       40| /usr/include
d|       40| /usr/bin
d|       40| /tmp
d|       40| /root
d|      260| /var
d|       60| /var/xiange
d|       60| /var/xiange/db
d|       60| /var/xiange/db/sys-apps
d|       40| /var/xiange/db/sys-apps/baselayout
d|       40| /var/local
d|       80| /var/lib
d|       40| /var/lib/locate
d|       40| /var/lib/misc
d|       40| /var/cache
d|       40| /var/opt
d|       40| /var/spool
d|       40| /var/run
d|       40| /var/mail
d|       40| /var/log
d|       40| /var/lock
d|       40| /var/tmp
d|       40| /srv
d|       40| /sbin
d|       80| /media
d|       40| /media/cdrom
d|       40| /media/floppy
d|       40| /opt
d|       40| /mnt
d|       40| /lib
d|       40| /home
d|       80| /etc
 |      193| /etc/group
 |       87| /etc/passwd
d|       40| /boot
d|       40| /bin

File: 2, Dir: 75, Link 6, Size: 1K
}}}

    * 可以用 gpkg -D baselayout 删除软件包, 但在进行下一步前, 要重新执行 gpkg -i baselayout 安装.
    * 包安装完毕后, 会自动生成二进制包(*.xgp), 放在/var/xiange/packages目录下. 如baselayout.xgp. 下次不想编译时, 可以直接安装二进制包: gpkg -ib /var/xiange/packages/baselayout-0.2.0.xgp

===3.7 安装linux-headers ===
    * gpkg -i linux-headers

    
===3.8 这时可以自由运行gpkg, 安装需要的软件包。===
    安装的列表如下:
{{{
     1  baselayout-0.2.0
     2  man-pages-3.24
     3  linux-headers-2.6.32.11
     4  glibc-2.10.1
     5  gmp-4.3.2
     6  mpfr-2.4.2
     7  gcc-4.4.3
     8  berkeley-db-4.7.25
     9  sed-4.2.1
    10  pkg-config-0.23
    11  ncurses-5.7
    12  util-linux-ng-2.17.2
    13  e2fsprogs-1.41.11
    14  coreutils-8.5
    15  iana-etc-2.30
    16  m4-1.4.14
    17  bison-2.4.2
    18  procps-3.2.8
    19  grep-2.6.3
    20  readline-6.1
    21  bash-4.1
    22  libtool-2.2.6
    23  gdbm-1.8.3
    24  inetutils-1.7
    25  zlib-1.2.5
    26  perl-5.12.0
    27  autoconf-2.65
    28  automake-1.11.1
    29  bzip2-1.0.5
    30  diffutils-2.9
    31  gawk-3.1.7
    32  findutils-4.4.2
    33  flex-2.5.35
    34  gettext-0.17
    35  groff-1.20.1
    36  grub-1.98
    37  gzip-1.4
    38  iproute2-2.6.33
    39  kbd-1.15.2
    40  less-436
    41  make-3.81
    42  man-db-2.5.7
    43  module-init-tools-3.11.1
    44  patch-2.6.1
    45  psmisc-22.11
    46  shadow-4.1.4.2
    47  file-5.04
    48  sysklogd-1.5
    49  sysvinit-2.86
    50  tar-1.23
    51  texinfo-4.13
    52  udev-153
    53  python-2.6.2
    54  git-1.7.0.6
    55  gpkg-0.10.4
    56  vim-7.2.411
    

}}}

===3.9 安装内核 ===
    * 内核也通过gpkg安装, 前提是先准备内核配置文件. 默认内核配置文件被baselayout包放在/boot/config-xiange文件.
    * gpkg -i linux-kernel 命令启动内核编译, gpkg自动解压内核到临时目录, 并将/boot/config-xiange文件拷贝到内核源码目录,改名为.config, 然后启动编译过程 (make && make modules)
    * 编译完成后, gpkg会将bzImage和config安装到/boot目录, 模块安装到/lib/modules目录, 并生成内核文件列表信息.
    * 有此可见, 编译内核前需要先编辑/boot/config-xiange文件, 你可以用各种方法编辑, 使它适用于你的系统.

===3.10 准备启动===
    * 设置密码，
    * 修改/etc/fstab
    * 安装GRUB2 或 GRUB
    * 重新启动



= 4.自动脚本安装 =
自动脚本安装通过脚本文件，自动调用gpkg安装所需软件包。自动安装时支持4中安装情景，称为情景0(又称Stage0), 情景1, 情景2, 情景3. 介绍如下:

||情景||简介||
||Stage0||完全从0开始安装，只需下载安装脚本，指定安装的目的分区(或目的目录),运行脚本即可。<br>脚本自动下载所需软件包，从头构建工具链，构建根系统，安装软件包，直至系统完成。||
||Stage1||比Stage0简化些，不需在本地构建工具链。预下载内容包括工具链和安装脚本。<br>指定安装的目的分区(或目的目录),运行脚本。<br>脚本自动下载所需软件包，构建根系统，安装软件包，直至系统完成。<br>启动命令: gpkg stage1 ||
||Stage2||比Stage1简化些，不需要额外的工具链。预下载内容包括跟文件系统，已预装好编译环境和包管理系统。<br>用户只需要在此基础上, 调用gpkg安装自己喜欢的软件包即可。||
||Stage3||Stage2的扩充，包括X系统, gtk2, qt4, fvwm, firefox等预装软件包。||

用户可以根据需求，从任何一种情景开始安装。情景0和情景1需要编译构建根系统，情景2和情景3解压后直接得到根系统。
根系统准备好后，编译内核，安装Grub, 创建用户，设置密码，然后重新启动即可。