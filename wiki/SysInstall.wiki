#summary 弦歌Linux安装指南
#labels Featured

= 0.简介 =

本文介绍了安装弦歌Linux的步骤。

= 1.安装方式 =

==1.1 软件包组成==
弦歌Linux由4大类软件包组成，分别称为Stage0, Stage1, Stage2, Stage3.<br>
Stage0软件包的目地和哺乳动物胎盘类似: 一个能chroot进去的软件环境并能编译安装stage1软件包。将弦歌Linux移植到到新平台只需先交叉编译Stage0即可。<br>
Stage1软件包包括让系统启动的命令行工具。可以构成服务器用系统。<br>
Stage2软件包包括图形界面，媒体格式库，Desktop等，可以构成日常生活用系统。本次发布的Xiange-x86-64-LiveUSB-4G-201404就是由全部Stage0-2软件包组成，正好放入一个4G U盘。<br>
Stage3软件包是另外一些专用软件包， Xiange-x86_64-LiveUSB-8G会包含Stage3软件包，如google earth, libreoffice等.<br>

==1.2 安装方式==
弦歌Linux支持2种安装方式: 手动安装和自动脚本安装。无论何种方式，都调用弦歌的包管理系统gpkg, 请参见文档[xgpkg].<br>
也可以采用混合方式安装，即先手动安装，了解弦歌的安装方式。然后再启动自动安装，已经安装过的包会自动跳过。    

= 1.3.手动安装 =
手动安装即通过手动的方式安装所有软件包，如先调用gpkg -i linux-header 安装所有Linux头文件， 再调用gpkg -i glibc 安装C库， 再调用gpkg -i bin-utils安装二进制工具链。安装的步骤和LFS手册类似，只是细节交给gpkg处理。<br>
这样可以让用户充分了解系统结构，对系统组成了如指掌。

具体步骤如下:
===3.0 宿主Linux系统 ===
    所谓宿主，就是安装时机器上运行的系统。利用这个系统运行构建工具，诞生新的系统。这和哺乳动物的分娩过程很类似...<br>
    弦歌可以使用任何带有编译环境的Linux系统做宿主系统. 如果目前机器上安装的系统不能满足，推荐使用[http://www.knopper.net/knoppix/ Knoppix]的LiveCD. 未来可以使用本站的LiveUSB和LiveCD (构建中... Help)

===3.1 准备主分区 ===

    * 首先需要一个主分区，至少5G以上。可以用fdisk/cfdisk从硬盘空闲空间生成，也可以使用现有无用分区。本文以/dev/sda4分区为例。
    * 格式化主分区, 推荐使用ext4. 命令如下（需要root身份）:
{{{
mkfs.ext4 /dev/sda4
}}}
    * 挂载到工作目录。本文以/mnt/xg为例，命令如下:
{{{
mount /dev/sda4 /mnt/xg
}}}

   
===3.2 准备交换分区 ===
    * 弦歌系统基于源码安装，有大量的编译工作，如果有多于1GB的内存, 且启动tmpfs, 编译工作在tmpfs(可以理解为内存)中完成，可以大大提高编译速度，延长硬盘使用寿命。
    * 先检查系统是否已经启动tmpfs, 使用df -t tmpfs命令, 如能看到如下信息，说明tmpfs 已经启动。
{{{
sword@XGSvr /mnt/xg $df -t tmpfs -h
文件系统	      容量  已用  可用 已用%% 挂载点
tmpfs                  10G  588K   10G   1% /dev/shm
}}}
    * 如果tmpfs没有启动，需要用命令mount -t tmpfs none /dev/shm -o size=3G 挂载。
    * tmpfs需要3G左右，如果空间不够，需要增加swap空间。
    
===3.3 准备工具链 (/tools目录) ===
    * 可以直接下载工具链，在根目录解压。[http://xiangelinux.googlecode.com/files/tools-bin-i686-0.10.7.tar.bz2 tools-0.10.7.tar.bz2下载] 75MB
        # 解压到工作目录即可进入继续3.4，命令如下:
{{{
cd /mnt/xg/
wget http://xiangelinux.googlecode.com/files/tools-bin-i686-0.10.7.tar.bz2
tar xf tools-bin-i686-0.10.7.tar.bz2
}}}

    * 若想自己重新编译tools目录，请参见文档[build_tools]
       
    tools目录工具列表: (名称-版本/安装时间, 在/mnt/xg/tools/installed.log)
{{{
binutils-2.19.1 2010-04-16 15:46:44
gcc-4.4.0 2010-04-16 17:09:43
linux-2.6.32.11 2010-04-16 17:10:22
glibc-2.10.1 2010-04-16 17:30:07
tcl8.5.7 2010-04-16 17:31:23
expect-5.43 2010-04-16 17:31:33
dejagnu-1.4.4 2010-04-16 17:31:41
gcc-4.4.0-pass2 2010-04-16 17:53:10
binutils-2.19.1-pass2 2010-04-16 17:56:39
ncurses-5.7 2010-04-16 17:58:54
bash-4.0 2010-04-16 18:02:48
bzip2-1.0.5 2010-04-16 18:02:54
coreutils-7.4 2010-04-16 10:05:01
diffutils-2.8.1 2010-04-16 10:05:23
e2fsprogs-1.41.7 2010-04-16 10:06:23
findutils-4.4.2 2010-04-16 10:07:47
gawk-3.1.6 2010-04-16 10:08:21
gettext-0.17 2010-04-16 10:10:38
grep-2.5.4 2010-04-16 10:10:58
gzip-1.3.12 2010-04-16 10:11:14
m4-1.4.13 2010-04-16 10:11:52
make-3.81 2010-04-16 10:12:14
patch-2.5.9 2010-04-16 10:12:28
perl-5.10.0 2010-04-16 10:14:37
sed-4.2.1 2010-04-16 10:14:59
tar-1.22 2010-04-16 10:15:52
texinfo-4.13 2010-04-16 10:16:30
util-linux-ng-2.15.1 2010-04-16 10:16:52
zlib-1.2.3 2010-04-16 10:16:57
git-1.6.3.3 2010-04-16 10:18:13
wget-1.11.4 2010-04-16 10:18:34
gpkg-0.10.7 2010-05-10 01:27:42
}}}
        

===3.4 chroot到工作环境 ===
      在工作目录下执行gpkg的chroot子命令，代码如下:
{{{
bash tools/bin/gpkg -chroot /mnt/xg
/mnt/xg check OK
I have no name!:/#
}}}
    gpkg的chroot会挂载 tmp,proc,sys,dev目录，并拷贝/etc/resolv.conf文件保证chroot后能正常上网。最后执行真正的chroot命令切换到工作目录。<br>
    注意在宿主系统中运行gpkg需要指定bash，否则默认从/tools/bin目录找bash, 会找不到。chroot后运行gpkg则没有这个问题。
   

      成功后，能看到如下信息:
{{{
I have no name!:/# ls
dev  lost+found  proc  sys  tmp  tools	var  
I have no name!:/# 

}}}



===3.5 更新编译脚本库 ===
    * 在chroot的环境里,执行gpkg --sync, 可以看到如下信息:
{{{
I have no name!:/etc# gpkg --sync
Initialized empty Git repository in /var/xiange/xglibs/.git/
remote: Counting objects: 26, done.
remote: Compressing objects: 100% (20/20), done.
remote: Total 26 (delta 5), reused 0 (delta 0)
Receiving objects: 100% (26/26), done.
Resolving deltas: 100% (5/5), done.
I have no name!:/etc# 
}}}
    gpkg --sync 会利用git下载位于github的软件包脚本库，放入/var/xiange/xglibs目录。

    * 如果失败,是网络连接问题,请检查网络连接和/etc/resolv.conf

===3.6 安装baselayout ===
    * 执行gpkg -s base 检查能否从库中找到baselayout
{{{
I have no name!:/# gpkg -s base
* sys-apps/baselayout
	Available: 0.2.1
	Installed:	 None
	Desc.    : Base layout for Xiange Linux
	Homepage : http://code.google.com/p/xiangelinux

I have no name!:/# 
}}}
    * gpkg -s 可以指定部分包文件名进行搜索。

    * 执行gpkg -i baselayout 安装baselayout, 系统会自动下载安装,信息如下:
{{{
I have no name!:/# gpkg -i baselayout
Begin download baselayout-0.2.1...
downloading from http://xiangelinux.googlecode.com/files/baselayout-0.2.1.tar.bz2, retry 0...
--2010-04-16 11:00:57--  http://xiangelinux.googlecode.com/files/baselayout-0.2.1.tar.bz2
Resolving xiangelinux.googlecode.com... 72.14.203.82
Connecting to xiangelinux.googlecode.com|72.14.203.82|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 890 [application/x-bzip2]
Saving to: `/var/xiange/sources/baselayout-0.2.1.tar.bz2.tmp'

100%[========================================>] 890         --.-K/s   in 0.002s  

2010-04-16 11:00:57 (418 KB/s) - `/var/xiange/sources/baselayout-0.2.1.tar.bz2.tmp' saved [890/890]

Download OK
[Unpack] dir=/tmp/xiange/sources
`/bin/sh' -> `/tools/bin/bash'
# make all directorys.
Install to /tmp/xiange/pack/baselayout-0.2.1
`/tmp/xiange/pack/baselayout-0.1.0/usr/man' -> `share/man'
`/tmp/xiange/pack/baselayout-0.1.0/usr/doc' -> `share/doc'
`/tmp/xiange/pack/baselayout-0.1.0/usr/info' -> `share/info'
`/tmp/xiange/pack/baselayout-0.1.0/usr/local/man' -> `share/man'
`/tmp/xiange/pack/baselayout-0.1.0/usr/local/doc' -> `share/doc'
`/tmp/xiange/pack/baselayout-0.1.0/usr/local/info' -> `share/info'
# password/group
Done
Install files to / ...
Install OK
`/bin/bash' -> `/tools/bin/bash'
`/bin/cat' -> `/tools/bin/cat'
`/bin/echo' -> `/tools/bin/echo'
`/bin/grep' -> `/tools/bin/grep'
`/bin/pwd' -> `/tools/bin/pwd'
`/bin/stty' -> `/tools/bin/stty'
`/usr/bin/perl' -> `/tools/bin/perl'
`/usr/lib/libgcc_s.so' -> `/tools/lib/libgcc_s.so'
`/usr/lib/libgcc_s.so.1' -> `/tools/lib/libgcc_s.so.1'
`/usr/lib/libstdc++.so' -> `/tools/lib/libstdc++.so'
`/usr/lib/libstdc++.so.6' -> `/tools/lib/libstdc++.so.6'
`/bin/sh' -> `bash'
I have no name!:/# 

}}}

    * 安装完毕后，执行gpkg -I 检查所有已经安装的软件包, 可以看到安装时间, 包内文件有效内容大小, 和名称/版本.
{{{
I have no name!:/# gpkg -I
2010-04-16 11:00:58      1K baselayout-0.2.1
I have no name!:/# 

}}}
    * 执行 gpkg -l baselayout列出包中所有文件。
{{{
I have no name!:/# gpkg -l baselayout
d|      240| /usr
l|       10| /usr/info
l|        9| /usr/doc
l|        9| /usr/man
d|      180| /usr/share
d|       40| /usr/share/zoneinfo
d|       40| /usr/share/terminfo
d|       40| /usr/share/misc
d|      200| /usr/share/man
d|       40| /usr/share/man/man8
d|       40| /usr/share/man/man7
d|       40| /usr/share/man/man6
d|       40| /usr/share/man/man5
d|       40| /usr/share/man/man4
d|       40| /usr/share/man/man3
d|       40| /usr/share/man/man2
d|       40| /usr/share/man/man1
d|       40| /usr/share/locale
d|       40| /usr/share/info
d|       40| /usr/share/doc
d|      220| /usr/local
l|       10| /usr/local/info
l|        9| /usr/local/doc
l|        9| /usr/local/man
d|      180| /usr/local/share
d|       40| /usr/local/share/zoneinfo
d|       40| /usr/local/share/terminfo
d|       40| /usr/local/share/misc
d|      200| /usr/local/share/man
d|       40| /usr/local/share/man/man8
d|       40| /usr/local/share/man/man7
d|       40| /usr/local/share/man/man6
d|       40| /usr/local/share/man/man5
d|       40| /usr/local/share/man/man4
d|       40| /usr/local/share/man/man3
d|       40| /usr/local/share/man/man2
d|       40| /usr/local/share/man/man1
d|       40| /usr/local/share/locale
d|       40| /usr/local/share/info
d|       40| /usr/local/share/doc
d|       40| /usr/local/src
d|       40| /usr/local/sbin
d|       40| /usr/local/lib
d|       40| /usr/local/include
d|       40| /usr/local/bin
d|       40| /usr/src
d|       40| /usr/sbin
d|       40| /usr/lib
d|       40| /usr/include
d|       40| /usr/bin
d|       40| /tmp
d|       40| /root
d|      260| /var
d|       60| /var/xiange
d|       60| /var/xiange/db
d|       60| /var/xiange/db/sys-apps
d|       40| /var/xiange/db/sys-apps/baselayout
d|       40| /var/local
d|       80| /var/lib
d|       40| /var/lib/locate
d|       40| /var/lib/misc
d|       40| /var/cache
d|       40| /var/opt
d|       40| /var/spool
d|       40| /var/run
d|       40| /var/mail
d|       40| /var/log
d|       40| /var/lock
d|       40| /var/tmp
d|       40| /srv
d|       40| /sbin
d|       80| /media
d|       40| /media/cdrom
d|       40| /media/floppy
d|       40| /opt
d|       40| /mnt
d|       40| /lib
d|       40| /home
d|       80| /etc
 |      193| /etc/group
 |       87| /etc/passwd
d|       40| /boot
d|       40| /bin

File: 2, Dir: 75, Link 6, Size: 1K
}}}
    * 注意目录和链接的大小是tmpfs目录下的大小，拷贝到工作分区后，目录占4096个。所以包大小不统计目录和链接大小，只统计文件有效内容大小。

    * 可以用 gpkg -D baselayout 删除软件包, 但在进行下一步前, 要重新执行 gpkg -i baselayout 安装.
    * 包安装完毕后, 会自动生成二进制包(*.xgp), 放在/var/xiange/packages目录下. 如baselayout.xgp. 下次不想编译时, 可以直接安装二进制包: gpkg -ib /var/xiange/packages/baselayout-0.2.1.xgp
    * 安装完baselayout后， 用gpkg --unchroot /mnt/xg, 然后重新执行bash tools/bin/gpkg -chroot /mnt/xg, 既可以去除"I have no name"的提示。
    * 文件信息和configure/make check的屏幕记录放在/var/xiange/db/目录下。注意有的软件包没有config过程和make check 过程。

    
===3.7 这时可以自由运行gpkg, 安装需要的软件包。===
    安装的列表如下:<br>
    注意：随时可以从手动安装切换到自动安装, 用命令 gpkg stage1 即可。gpkg从/var/xiange/xglibs/stages/stage1文件读取待安装包列表，逐一安装。已经手动安装过的包会自动跳过。
    注意2: 如果gmp因为64bit的问题configure失败，执行export ABI=32, 再次gpkg -i gmp 或gpkg stage1即可。

{{{
     1	baselayout-0.2.1
     2	man-pages-3.24
     3	linux-headers-2.6.32.11
     4	glibc-2.10.1
     5	binutils-2.20
     6	gmp-4.3.2
     7	mpfr-2.4.2
     8	gcc-4.4.3
     9	gpkg-0.10.4
    10	berkeley-db-4.7.25
    11	sed-4.2.1
    12	pkg-config-0.23
    13	ncurses-5.7
    14	util-linux-ng-2.17.2
    15	e2fsprogs-1.41.11
    16	coreutils-8.5
    17	iana-etc-2.30
    18	m4-1.4.14
    19	bison-2.4.2
    20	procps-3.2.8
    21	grep-2.6.3
    22	readline-6.1
    23	bash-4.1
    24	libtool-2.2.6
    25	gdbm-1.8.3
    26	inetutils-1.7
    27	zlib-1.2.5
    28	perl-5.12.0
    29	autoconf-2.65
    30	automake-1.11.1
    31	bzip2-1.0.5
    32	diffutils-2.9
    33	gawk-3.1.7
    34	findutils-4.4.2
    35	flex-2.5.35
    36	gettext-0.17
    37	groff-1.20.1
    38	grub-1.98
    39	gzip-1.4
    40	iproute2-2.6.33
    41	kbd-1.15.2
    42	less-436
    43	make-3.81
    44	man-db-2.5.7
    45	module-init-tools-3.11.1
    46	patch-2.6.1
    47	psmisc-22.11
    48	shadow-4.1.4.2
    49	file-5.04
    50	sysklogd-1.5
    51	sysvinit-2.86
    52	tar-1.23
    53	texinfo-4.13
    54	udev-153
    55	python-2.6.2
    56	linux-kernel-2.6.32.11 (参见下节说明)
    57	git-1.7.0.6
    58	vim-7.2.411
}}}

===3.8 安装内核 ===
    * 内核也通过gpkg安装, 前提是先准备内核配置文件. 默认内核配置文件是/boot/config-xiange.
    * 这个文件由baselayout包创建，缺省是一个通用内核的.config配置文件。
    * 用户可以将适用于自己系统的.config文件覆盖缺省文件， 运行gpkg -i linux-kernel 命令启动内核编译, gpkg自动解压内核到临时目录, 并将/boot/config-xiange文件拷贝到内核源码目录,改名为.config, 然后启动编译过程 (make && make modules)
    * 编译完成后, gpkg会将bzImage和config安装到/boot目录, 模块安装到/lib/modules目录, 并生成内核文件列表信息.
    * 用这种方法，内核文件和模块也会有记录，并采集MD5校验码，比直接安装内核要好。
    * 内核安装完毕后会从/tmp/xiange/sources目录清除。如果想编译依赖于内核源码的模块，需要先还原内核源码（必须在原来的编译地址还原)，步骤如下:
{{{
    mkdir -p /tmp/xiange/sources
    cd /tmp/xiange/sources
    tar xf /var/xiange/sources/linux-2.XXXX.tar.bz2
    cp /boot/config-xiange linux-2XXX/.config
    make prepare
    make modules_prepare
}}}
    然后再编译模块就可以了。

===3.9 准备启动===
    * 设置密码，
    * 修改/etc/fstab，设置根系统。
    * 安装GRUB2 
        # GRUB2的安装十分简单， 执行 grub-install 设备名即可。如系统在/dev/sda8, 执行 
{{{
    grub-install /dev/sda8
}}}

        # 加入配置文件到 /boot/grub/grub.cfg
{{{

# Timeout for menu
set timeout=5

# Set default boot entry as Entry 0
set default=0

#video settings
#insmod video
#insmod vbe
#insmod gfxterm
#insmod jpeg
#
#loadfont /boot/grub/ascii.pff
#set gfxmode="1400x1050x24"
#terminal_output.gfxterm
#background_image /boot/grub/test.jpg

menuentry "Xiange-2.6.32.11" {
    set root=(hd0,8)
    linux /boot/vmlinuz-2.6.32.11 root=/dev/sda8 quiet
}

enuentry "Windows 7" {
    set root=(hd0,1)
    chainloader +1
}

}}}
    * 删除/tools目录，就像剪断脐带...
    * 执行 gpkg -unchroot /mnt/xg 退出系统
    * 卸载/mnt/xg: umount /mnt/xg
    * 删除/etc/rc.d/rc3.d/S97trackpoint, 这个只对Thinkpad的小红点有用...否则开机会提示错误。
{{{
/etc/rc.d/rc3.d
rm S97trackpoint
}}}
    * 重新启动, 新的Linux系统诞生. 如果内核没配置好... 就是大脑发育不全，小心了:)

===3.10 安装Stage2===

    Stage2 包含Xorg 7.5, GTK2, wine, 必要的图形/声音库，firefox, pidgin, 和桌面管理器fvwm, 可打造一个工作环境。
    * 首先更新编译脚本库
{{{
gpkg --sync
}}}

    * 升级gpkg到0.10.8, 貌似这个有点难度...因为目前核心包不支持滚动升级。
{{{
#删除gpkg的安装信息
rm -rf /var/xiange/db/sys-apps/gpkg/

#然后强行安装,直接覆盖
gpkg -i gpkg

#成功后执行gpkg,看版本信息
gpkg -v
0.10.8
}}}

    * 自动安装 stage2的话， 只需输入
{{{
gpkg stage2
}}}

自动安装下列软件包:
{{{
     1	x11protos-7.5
     2	x11utils-7.5
     3	ed-1.4
     4	freetype-2.3.12
     5	expat-2.0.1
     6	fontconfig-2.8.0
     7	libxml2-2.7.6
     8	libgpg-error-1.7
     9	libgcrypt-1.4.5
    10	libxslt-1.1.26
    11	x11libs-7.5
    12	libdrm-2.4.14
    13	mesa-7.6
    14	libpng-1.2.43
    15	x11apps-7.5
    16	appres-1.0.2
    17	xfontsel-1.0.2
    18	x11fonts-7.5
    19	wqy-zenhei-0.8.38
    20	wqy-bitmap-1.0.0
    21	xml-parser-2.36
    22	intltool-0.40.6
    23	xkeyboard-config-1.7
    24	pixman-0.15.20
    25	xinit-1.1.1
    26	xterm-253
    27	xorg-server-1.7.1
    28	x11drivers-7.5
    29	curl-7.20.1
    30	libjpeg-8
    31	startup-notification-0.9
    32	giflib-4.1.6
    33	libtiff-3.9.2
    34	openjpeg-1.3
    35	lcms-1.19
    36	libmng-1.0.10
    37	aalib-1.4.5
    38	alsa-lib-1.0.23
    39	alsa-plugins-1.0.23
    40	alsa-utils-1.0.23
    41	slim-1.3.1
    42	dbus-1.2.24
    43	cairo-1.8.10
    44	glib2-2.22.5
    45	pango-1.28.0
    46	atk-1.30.0
    47	shared-mime-info-0.71
    48	hicolor-icon-theme-0.12
    49	gtk2-2.18.9
    50	gperf-3.0.4
    51	dbus-glib-0.86
    52	hal-0.5.14
    53	imlib2-1.4.3
    54	vte-0.22.5
    55	trayer-1.0
    56	habak-0.2.5
    57	lua-5.1.4
    58	conky-1.8.0
    59	cmake-2.8.1
    60	sakura-2.3.8
    61	libnotify-0.4.5
    62	libIDL-0.8.13
    63	librsvg-2.26.3
    64	tcl-8.5.8
    65	tk-8.5.8
    66	sqlite-3.6.23.1
    67	firefox-3.6.3
    68	sun-jdk-6.20
    69	fcitx-3.6.2
    70	fvwm-2.5.29
    71	links-2.2
    72	babl-0.1.2
    73	gegl-0.1.2
    74	viewres-1.0.2
    75	poppler-data-0.4.2
    76	poppler-0.12.4
    77	fribidi-0.10.9
    78	libgsf-1.14.18
    79	libwmf-0.2.8.4
    80	wv-1.2.7
    81	abiword-2.8.4
    82	epdfview-0.1.7
    83	gnutls-2.8.6
    84	pidgin-2.6.6
    85	xlockmore-5.30
    86	libexif-0.6.19
    87	libgphoto2-2.4.9.1
    88	libexif-gtk-0.3.5
    89	gtkam-0.1.17
    90	imagemagick-6.6.1.5
    91	mpg123-1.12.1
    92	wine-1.1.43
    93	skype-2.1.0.81
    94	icoutils-0.29.1
    95	ctags-5.8
    96	lpc21isp-1.79
    97	gimp-2.6.8
    98	git-1.7.0.6
    99	freeglut-2.6.0
   100	ftgl-2.1.3.5
   101	openal-1.12.854
   102	freealut-1.1.0
   103	glpng-1.45
   104	chromium-0.9.14
   105	gamin-0.1.10
   106	pcmanfm-0.5.2
   107	xml-simple-2.18
   108	icon-naming-utils-0.8.90
   109	tango-icon-theme-0.8.90
   110	gtkglext-1.2.0
   111	gliv-1.9.6
   112	celestia-1.6.0
   113	fvwm-xiange
}}}

===3.11 启动Stage2===   
    * 首先配置X服务器， 在/root下执行
{{{
Xorg -configure
}}}
并把生成的xorg.conf.new拷贝到 /etc/X11/xorg.conf
    * 将文泉驿字体路径放到xorg.conf里, misc之后的位置。
{{{
        FontPath     "/usr/lib/X11/fonts/misc/"
        FontPath     "/usr/share/fonts/wenquanyi/wqy-bitmap"
        FontPath     "/usr/share/fonts/wenquanyi/wqy-zenhei"
}}}
    * 成功后尝试用startx启动X. 可用看到twm, 先忍受一会儿:)
    * 如果启动不成功，需要都X的log文件，或修改x11drivers的安装脚本，看看所需的驱动是否在内
    * 配置pango，在xterm里：
{{{
pango-querymodules > /etc/pango/pango.modules
}}}
否则依赖pango的程序，字体都是大方块
    * 配置GTK
{{{
gdk-pixbuf-query-loaders > /etc/gtk-2.0/gdk-pixbuf.loaders
gtk-query-immodules-2.0 > /etc/gtk-2.0/gtk.immodules
}}}
否则..很多图标不显示，且中文输入法不起作用。
    * 创建一个user用户
{{{
    groupadd xiange
    useradd -m -g xiange -G audio,video xiange
    passwd xiange
}}}
注意audio和video,否则一会儿会没声音，不能使用OPENGL图形加速。<br>
创建后/home/xiange目录会有一些配置信息:
{{{
sword@XGSvr /home/xiange $ls -la
总用量 32
drwxr-xr-x 4 xiange xiange 4096  5月 14 11:07 .
drwxr-xr-x 5 root   root   4096  5月 14 11:07 ..
-rw-r--r-- 1 xiange xiange   21  5月 14 11:06 .bash_logout
-rw-r--r-- 1 xiange xiange 2180  5月 14 11:06 .conkyrc
drwxr-xr-x 2 xiange xiange 4096  5月 14 11:06 .fvwm
-rw-r--r-- 1 xiange xiange   29  5月 14 11:06 .gtkrc-2.0
drwxr-xr-x 2 xiange xiange 4096  5月 14 11:06 .wallpapers
-rw-r--r-- 1 xiange xiange  462  5月 14 11:06 .xinitrc
}}}
可用把喜欢的图像拷贝到.wallpaper目录， 每次启动时，fvwm会随机选择一张做背景。


    * 自动通过slim启动X,
{{{
cd /etc/rc.d/rc3.d
ln -sv /etc/rc.d/init.d/slim S99slim
ln -sv /etc/rc.d/init.d/slim K01slim
}}}

    * 加入alsa, 开关机时能听到语音提示
{{{
cd /etc/rc.d/rc3.d
ln -sv /etc/rc.d/init.d/alsa S90alsa
ln -sv /etc/rc.d/init.d/alsa K10alsa
}}}

    重新启动，顺利的话，就能看到和抓图一样的界面。


= 4.自动脚本安装 =
自动脚本安装通过脚本文件，自动调用gpkg安装所需软件包。自动安装时支持4中安装情景，称为情景0(又称Stage0), 情景1, 情景2, 情景3. 介绍如下:

||情景||简介||
||Stage0||完全从0开始安装，只需下载安装脚本，指定安装的目的分区(或目的目录),运行脚本即可。<br>脚本自动下载所需软件包，从头构建工具链，构建根系统，安装软件包，直至系统完成。||
||Stage1||比Stage0简化些，不需在本地构建工具链。预下载内容包括工具链和安装脚本。<br>指定安装的目的分区(或目的目录),运行脚本。<br>脚本自动下载所需软件包，构建根系统，安装软件包，直至系统完成。<br>启动命令: gpkg stage1 ||
||Stage2||比Stage1简化些，不需要额外的工具链。预下载内容包括跟文件系统，已预装好编译环境和包管理系统。<br>用户只需要在此基础上, 调用gpkg安装自己喜欢的软件包即可。||
||Stage3||Stage2的扩充，包括X系统, gtk2, qt4, fvwm, firefox等预装软件包。||

用户可以根据需求，从任何一种情景开始安装。情景0和情景1需要编译构建根系统，情景2和情景3解压后直接得到根系统。
根系统准备好后，编译内核，安装Grub, 创建用户，设置密码，然后重新启动即可。

= 1.安装需求 =

||硬件需求||任何Linux支持的硬件系统，目前只在PC机上测试<br>5G以上的硬盘空间<br>128MB以上的内存||