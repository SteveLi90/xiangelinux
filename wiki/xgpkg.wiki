#summary 弦歌Linux的包管理系统
#labels Featured

=0. 简介 =

本文描述了弦歌Linux包管理系统gpkg的功能需求。
<br><br>


=1. 包命名=

包管理器以软件包为单位，进行搜索，下载，安装，查询，卸载，升级, 校验等操作。每个软件包都有相对唯一的名称，如:<br>
autoconf-2.63-r1 <br>

包名称由三个部分组成, 软件名称, 版本号, 修订号.<br>
        软件名称由$N表示(Name), 如autoconf. 允许中间有'-', 如x-org等.<br>
        版本号表示为$V , 即Version. 由几个数字组成, 中间用.隔开, 如2.63, 3.1.0.24等. 注意比较时, 2.10 > 2.9.<br>
        修订号表示为$R, 为可选项, 必须由小写的-r开头, 后面跟数字.<br><br>

=2. 搜索/查询软件包=

||命令格式||gpkg -s 软件名称||
||示例||gpkg -s autoconf||
||功能||显示软件包最新版本号，已安装的版本号（如果已经安装），下载文件大小，安装后占用空间大小||
||结果||返回0表示精确匹配, 返回1表示模糊匹配, 返回2表示匹配失败||
||补充说明||支持模糊搜索/正则表达式搜索||
||状态||已完成||
<br><br>

示例:
{{{
gpkg -s gcc

* sys-devel/gcc
	Available: 4.4.3
	Installed: 4.4.3 | 2010-04-27 15:55:50 35520K
	Desc.    : everyone knows gcc..
	Homepage : http://gcc.gnu.org/

}}}

=3. 下载软件包=

||命令格式||gpkg -d 软件名称||
||示例||gpkg -d autoconf||
||功能||先检查本地磁盘，如果文件已下载且校验正确，直接返回成功<br>如果本地没有，则连接软件源头下载||
||结果||返回0表示下载/校验成功, 返回1下载失败, 返回2表示校验失败||
||补充说明||下载包括必要的补丁文件||
||状态||已完成||


=4. 安装/升级软件包=
||命令格式||gpkg -i 软件名称||
||示例||gpkg -i autoconf||
||功能||如果本地没有，先下载软件包。<br>如果已经安装且当前版本低于最新版本，进行升级操作。<br>如果没有安装，进行安装操作<br>安装成功后，记录软件包信息，包括每个文件路径，大小，校验码等||
||结果||返回0表示安装成功, 返回1安装失败||
||状态||已可安装，尚不可升级。升级时需要先卸载，再安装新版本。尚不支持依赖关系处理。||

=5. 安装/升级二进制软件包=
||命令格式||gpkg -ib 软件包路径名称(.xgp)||
||示例||gpkg -ib /var/xiange/packages/autoconf-2.20.xgp||
||功能||如果已经安装且当前版本低于最新版本，进行升级操作。<br>如果没有安装，进行安装操作<br>安装成功后，记录软件包信息，包括每个文件路径，大小，校验码等, 并执行包内安装脚本的xgb_postinst函数||
||结果||返回0表示安装成功, 返回1安装失败||
||状态||已可安装，尚不可升级。升级时需要先卸载，再安装新版本||


=6. 卸载软件包=
||命令格式||gpkg -D 软件名称||
||示例||gpkg -D autoconf||
||功能||卸载软件包，先执行包内脚本的xgb_prerm，删除所有包文件，再执行包内脚本文件的xgb_postrm||
||结果||返回0表示卸载成功, 返回1卸载失败||
||状态||已完成||


=7. 校验软件包=
||命令格式||gpkg -c 软件名称||
||示例||gpkg -c autoconf||
||功能||根据记录的md5校验信息，校验软件包的每个文件，看看是否被修改过||
||结果||返回0表示所有文件校验成功, 返回1表示校验失败||
||状态||校验码已采集记录，校验功能尚不支持||

=8. 列出已安装的软件包=
||命令格式||gpkg -I ||
||示例||gpkg -I||
||功能||列出所有已安装的软件包，并显示出安装时节，占用空间大小等信息.<br>可用sort排序，nl计算个数||
||结果||返回0表示成功, 返回1表示没有任何软件包||
||状态||已完成||

示例:
{{{
gpkg -I | sort | tail
2010-05-21 11:08:18    635K gd-2.0.36
2010-05-21 11:13:06   1812K geoip-1.4.6
2010-05-21 11:14:43    449K conky-1.8.0
2010-05-21 11:25:39    683K libupnp-1.6.6
2010-05-21 11:57:43   7599K amule-2.2.6
2010-05-21 14:10:32  20317K crypto++-5.6.0
2010-05-21 19:17:01    439K libglade-2.6.4
2010-05-21 19:34:47    795K nasm-2.08.01
2010-05-21 20:11:04   6229K snes9x-1.52
2010-05-23 14:11:27      1K mplayer-1.0
}}}


=9. 列出包文件=
||命令格式||gpkg -l 软件名称||
||示例||gpkg -l autoconf||
||功能||列出属于软件包的所有文件信息，包括路径，大小，权限，最后修改时间，md5sum等||
||结果||返回0表示成功, 返回1表示包没有安装||
||状态||已完成||

示例:
{{{
gpkg -l conky

d|       60| /etc
d|       80| /etc/conky
 |     1830| /etc/conky/conky_no_x11.conf
 |     2549| /etc/conky/conky.conf
d|      100| /usr
d|       60| /usr/lib
d|       40| /usr/lib/conky
d|       60| /usr/share
d|       60| /usr/share/man
d|       60| /usr/share/man/man1
 |    25512| /usr/share/man/man1/conky.1.gz
d|       60| /usr/bin
 |   429764| /usr/bin/conky

File: 4, Dir: 9, Link 0, Size: 449K
}}}

=10. 查找指定文件归属=
||命令格式||gpkg -S 文件名||
||示例||gpkg -S /usr/bin/autoconf||
||功能||查找指定的文件属于哪个软件包||
||结果||返回0表示成功, 返回1表示没有找到, 返回2表示找到多个(冲突)||
||状态||已完成||

示例:
{{{

gpkg -S /usr/bin/conky 

app-admin/conky-1.8.0 : F,/usr/bin/conky
}}}

=11. 查找指定路径下的孤儿文件=
||命令格式||gpkg -F 路径||
||示例||gpkg -F /usr/bin||
||功能||搜索指定路径下不属于任何包的文件, 或被多个包所拥有的文件||
||结果||返回0表示成功, 返回1表示有孤儿或冲突||
||状态||已完成||

示例:
{{{
sudo gpkg -F /lib
Password:

Searching orphans in /lib..
     1 O /lib/firmware/ipw2200-ibss.fw
     2 O /lib/firmware/ipw2200-bss.fw
     3 O /lib/firmware/ipw2200-sniffer.fw
     4 O /lib/firmware/LICENSE.ipw2200-fw
Searched 957 files, 4 orphans, 0 conflicts

}}}


=12. 同步脚本库=
||命令格式||gpkg --sync ||
||示例||gpkg --sync||
||功能||用git同步软件包的编译脚本库||
||结果||返回0表示成功, 返回1表示git失败||
||状态||已完成||

=13. 显示/修改优化参数=
||命令格式||gpkg -info ||
||示例||gpkg -info||
||功能||显示目前gpkg使用编译参数||
||状态||已完成||

示例:
{{{
gpkg -info

CC="gcc"
CFLAGS="-march=native -mtune=native -O2 -fomit-frame-pointer -pipe"
CPPFLAGS="$CFLAGS"
XG_I18N="en zh_CN"
}}}

gpkg从0.10.7开始，先检查/etc/xgparas是否存在，如果存在，使用里面的参数作为编译参数, 否则使用默认优化参数。<br>
默认优化参数为"-march=native -mtune=native -O2 -fomit-frame-pointer -pipe". native是很强悍的优化参数，完全针对当前CPU类型做优化，使软件运行达到极限性能。<br>
如想修改编译参数， 可以用命令:
{{{
gpkg -info > /etc/xgparas
}}}

然后修改 /etc/xgparas文件，如将native改为i686, 这样软件包可以在大多数CPU上运行(注意会降低优化性能)<br>
修改完成后再次运行gpkg -info, 可以看到修改已生效:
{{{
sed -i "s/native/i686/g" /etc/xgparas

gpkg -info
CC="gcc"
CFLAGS="-march=i686 -mtune=i686 -O2 -fomit-frame-pointer -pipe"
CPPFLAGS="$CFLAGS"
XG_I18N="en zh_CN"
}}}

XG_I18N控制允许那些本地化字符串安装在/usr/share/locale目录下。默认允许英文和中文资源安装，其他的在安装前剔除。

=14. 显示软件包依赖列表=
||命令格式||gpkg -dep 包名称 ||
||示例||gpkg -dep libpng||
||功能||分层次显示出依赖的尚未安装的软件包||
||结果||返回0表示成功, 返回1表示git失败||
||状态||未完成||

=15. 显示软件包反向依赖列表=
||命令格式||gpkg -rdep 包名称 ||
||示例||gpkg -rdep libpng||
||功能||分层次显示出所有依赖于指定软件包的已安装软件包||
||结果||返回0表示成功, 返回1表示git失败||
||状态||已完成||


示例:
{{{
gpkg -rdep libpng

Searching rdep for libpng.so..
2601    Found:0   
Result:

Searching rdep for libpng12.so..
2601    Found:38  
Result:
1    media-gfx/gtkam-0.1.17
2    media-libs/libwmf-0.2.8.4
3    app-office/abiword-2.8.4
4    media-gfx/gimp-2.6.8
5    media-gfx/icoutils-0.29.1
6    media-libs/gd-2.0.36
7    app-text/wv-1.2.7
8    media-libs/librsvg-2.26.3
9    media-gfx/imagemagick-6.6.1.5
10   x11-apps/xcursorgen-1.0.3
11   x11-misc/trayer-1.0
12   x11-libs/vte-0.22.5
13   x11-misc/slim-1.3.1
14   app-text/poppler-0.12.4
15   app-text/stardict-3.0.1
16   x11-misc/xlockmore-5.30
17   media-glx/gliv-1.9.6
18   net-p2p/amule-2.2.6
19   games-emulation/snes9x-1.52
20   app-text/epdfview-0.1.7
21   sci-astronomy/celestia-1.6.0
22   media-libs/gegl-0.1.2
23   x11-wm/fvwm-2.5.29
24   x11-libs/gtk2-2.18.9
25   x11-terms/sakura-2.3.8
26   games-action/chromium-0.9.14
27   x11-libs/pango-1.28.0
28   x11-libs/libnotify-0.4.5
29   x11-misc/pcmanfm-0.5.2
30   www-client/links-2.2
31   net-im/pidgin-2.6.6
32   x11-libs/wxGTK-2.8.11
33   x11-libs/gtkglext-1.2.0
34   www-client/firefox-3.6.3
35   media-libs/imlib2-1.4.3
36   media-libs/libexif-gtk-0.3.5
37   media-libs/glpng-1.45
38   x11-libs/cairo-1.8.10
39   gnome-base/libglade-2.6.4
}}}