#labels Featured
#弦歌Linux的包管理系统

=0. 简介 =

本文描述了弦歌Linux包管理系统gpkg的功能需求。
<br><br>


=1. 包命名=

包管理器以软件包为单位，进行搜索，下载，安装，查询，卸载，升级, 校验等操作。每个软件包都有相对唯一的名称，如:<br>
autoconf-2.63-r1 <br>

包名称由三个部分组成, 软件名称, 版本号, 修订号.<br>
        软件名称由$N表示(Name), 如autoconf. 允许中间由'-', 如x-org等.<br>
        版本号表示为$V , 即Version. 由几个数字组成, 中间用.隔开, 如2.63, 3.1.0.24等. 注意比较时, 2.10 > 2.9.<br>
        修订号表示为$R, 为可选项, 必须由小写的-r开头, 后面跟数字.<br><br>

=2. 搜索/查询软件包=

||命令格式||gpkg -s 软件名称||
||示例||gpkg -s autoconf||
||功能||显示软件包最新版本号，已安装的版本号（如果已经安装），下载文件大小，安装后占用空间大小||
||结果||返回0表示精确匹配, 返回1表示模糊匹配, 返回2表示匹配失败||
||补充说明||支持模糊搜索/正则表达式搜索||
<br><br>

=3. 下载软件包=

||命令格式||gpkg -d 软件名称||
||示例||gpkg -d autoconf||
||功能||先检查本地磁盘，如果文件已下载且校验正确，直接返回成功<br>如果本地没有，则连接软件源头下载||
||结果||返回0表示下载/校验成功, 返回1下载失败, 返回2表示校验失败||
||补充说明||下载包括必要的补丁文件||


=4. 安装/升级软件包=
||命令格式||gpkg -i 软件名称||
||示例||gpkg -i autoconf||
||功能||如果本地没有，先下载软件包。<br>如果已经安装且当前版本低于最新版本，进行升级操作。<br>如果没有安装，进行安装操作<br>安装成功后，记录软件包信息，包括每个文件路径，大小，校验码等||
||结果||返回0表示安装成功, 返回1安装失败||

=5. 安装/升级二进制软件包=
||命令格式||gpkg -ib 软件包路径名称(.xgp)||
||示例||gpkg -i autoconf||
||功能||如果已经安装且当前版本低于最新版本，进行升级操作。<br>如果没有安装，进行安装操作<br>安装成功后，记录软件包信息，包括每个文件路径，大小，校验码等, 并执行包内安装脚本的xgb_postinst函数||
||结果||返回0表示安装成功, 返回1安装失败||


=6. 卸载软件包=
||命令格式||gpkg -D 软件名称||
||示例||gpkg -D autoconf||
||功能||卸载软件包，删除所有包文件||
||结果||返回0表示卸载成功, 返回1卸载失败||


=7. 校验软件包=
||命令格式||gpkg -c 软件名称||
||示例||gpkg -c autoconf||
||功能||根据记录的md5校验信息，校验软件包的每个文件，看看是否被修改过||
||结果||返回0表示所有文件校验成功, 返回1表示校验失败||

=8. 列出已安装的软件包=
||命令格式||gpkg -I ||
||示例||gpkg -I||
||功能||按安装时间排序，列出所有已安装的软件包，并显示出文件个数，占用空间大小等信息||
||结果||返回0表示成功, 返回1表示没有任何软件包||


=9. 列出包文件=
||命令格式||gpkg -l 软件名称||
||示例||gpkg -l autoconf||
||功能||列出属于软件包的所有文件信息，包括路径，大小，权限，最后修改时间，md5sum等||
||结果||返回0表示成功, 返回1表示包没有安装||

=10. 查找指定文件归属=
||命令格式||gpkg -S 文件名||
||示例||gpkg -S /usr/bin/autoconf||
||功能||查找指定的文件属于哪个软件包||
||结果||返回0表示成功, 返回1表示没有找到, 返回2表示找到多个(冲突)||

=11. 查找指定路径下的孤儿文件=
||命令格式||gpkg -F 路径||
||示例||gpkg -F /usr/bin||
||功能||搜索指定路径下不属于任何包的文件, 或被多个包所拥有的文件||
||结果||返回0表示成功, 返回1表示有孤儿或冲突||


=12. 同步脚本库=
||命令格式||gpkg --sync ||
||示例||gpkg --sync||
||功能||用git同步软件包的编译脚本库||
||结果||返回0表示成功, 返回1表示git失败||