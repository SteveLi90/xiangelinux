#summary 包编译脚本的写作方法

= 0. 简介 =

本文描述了弦歌包管理系统[xgpkg gpkg]和编译脚本库之间的接口，和示例脚本的写作方法。<br>
每个发行版本都有自己的编译脚本库，如Gentoo的portage, Slackware的slack build, Arch的abs等。目前的问题是没有统一的编译脚本接口，不能互相通用。不过可以互相借鉴。


= 1. 接口 =

对编译脚本来说，接口分为输入接口和输出接口两部分。接口由bash的变量和函数实现。

== 1.1 输入接口 ==

输入接口主要是路径信息，编译参数等，由变量实现, 列表如下:

||变量名称||描述||示例取值||备注||
||$T||软件包类别||"app-sys"||||
||$N||软件包名称||"autoconfg"||||
||$V||软件包版本||"2.6.31"||||
||$R||软件包修订版本||"-r1"||||
||$XGPATH_SOURCE||源码所在的目录||"/var/xiange/sources"||||
||$XGPATH_DEST||安装/打包目录||"/tmp/xiange/pack/$N-$V"||||
||$CFLAGS||编译参数||"-march=native -mtune=native -O2 -fomit-frame-pointer -pipe"||系统变量||
||$CXXFLAGS||C++编译参数||同$CFLAGS||系统变量||
||XGB_CONFIG||autotools配置参数||--prefix=/usr/||进行configure时, 可以指定$XGB_CONFIG做参数. 软件包特定的部分用 XGB_CONFIG+=" --para=abc "实现.||

关于$T, $N, $V, $R, 可以参见[xgpkg gpkg]中的软件包命名规则。


== 1.2 输出接口: 变量 ==
||变量名称||描述||示例取值||备注||
||DESCRIPTION||软件包简短描述||"This is a sample skeleton xiange build script file"||||
||HOMEPAGE||软件包主页||"http://foo.bar.com/"||||
||SRC_URI||源码文件地址||"http://foo.bar.com/test.tar.bz2"||多于一个文件时，每行一个文件||
||BIN_URI||二进制包地址||"http://foo.bar.com/test.tar.bz2"||多于一个文件时，每行一个文件<br>暂不实现||
||XGB_CONFIG||执行configure时的参数||"CC=gcc --prefix=/usr"||gpkg会记录到打包文件里||

== 1.3 输出接口: 函数 ==

===1.3.1  xgb_init()===
    gpkg调用xgb文件的接口函数前，首先调用xgb_init. 再这里可以重新对一些变量赋值。<br>
    gpkg在调用其他函数前，一定会调用此函数一次<br>
    若脚本不实现此函数，gpkg会调用默认的xgb_init函数，直接返回0.

===1.3.2 xgb_unpack()===
    gpkg在安装指定软件包前，先调用软件包对应脚本文件的unpack函数。<br>
    xgb_unpack需要将下载的源码(位于$XGPATH_SOUCE目录)解压到当前目录，缺省是/tmp/xiange/sources/, 并打上所有补丁, 必要时, 可以重新执行autoconf, automake, 生成新的configure文件<br>
    成功返回0, 否则1并显示错误信息. 
   
===1.3.3 xgb_config()===
    gpkg在调用玩xgb_unpack后，调用xgb_config配置软件包。<br>
    调用xgb_config前，当前目录仍在解压目录(即/tmp/xiange/sources/)<br>
    xgb_config 首先要进入或创建编译目录，然后调用configure配置软件包。配置由三个大部分组成, 一为安装目录, 即--prefix, --sysconfdir等, 这个每个软件包都一样, 放在变量$XGB_CONFIG里
    
  
    第三步部分为软件包特有的, 需要增加到$XGB_CONFIG里.<br>

    成功返回0, 否则返回2并显示错误信息.<br>


===1.3.4 xgb_build() ===
    gpkg调用脚本config成功后，调用build功能编译软件包.<br>
    xgb_build应该调用make编译整个软件包，然后根据需要编译文档
    成功返回0, 否则3并显示错误信息.<br>
 

===1.3.5 xgb_install()===
    编译完成后，gpkg调用install将软件包安装到临时打包目录/tmp/xiange/包名称/pack/. 这个位置用$XGPATH_DEST表示。脚本编写者要读注意不能直接安装到根目录！<br>
    xgb_install应该调用make install将软件包安装在这个临时目录。脚本编写者要读懂make install的代码，确保软件包只安装在临时目录，不会安装在根目录。<br>
    对于大部分情况, 指定make DESTDIR=$XGPATH_DEST install 即可。
    安装成功后返回0, 失败返回4并显示错误信息。

    
===1.3.6 xgb_postinst()===
    gpkg将软件包拷贝到根目录后, 调用脚本的postinst , 执行一些特有的操作, 如创建用户, 修改启动脚本等.这些功能可以调用gpkg提供的接口函数完成。

===1.3.7 xgb_prerm()===
    gpkg删除软件包所有文件和目录前，调用prerm函数进行预清除，如删除没有记录到列表中的文件。


===1.3.8 xgb_postrm()===
    gpkg删除软件包所有文件和目录后，调用postrm函数进行最后的清除，如删除用户，去掉启动脚本等。。


===1.3.9 xgb_checkupdate()===
    需要检查当前软件有没有最新版本时, 调用这个功能. <br>
    脚本下载软件所在的网页, 解析网页找到最新的版本, 显示出来。

    可以写一个模板文件, 想编译新软件包时, 拷贝模板文件并编译即可.




= 2. 示例脚本==
{{{
#!/bin/bash
#
# Xiange Linux build scripts

# Short one-line description of this package.
DESCRIPTION="GNU awk pattern-matching language"

# Homepage, not used by Portage directly but handy for developer reference
HOMEPAGE="http://www.gnu.org/software/gawk/gawk.html"

# Point to any required sources; these will be automatically downloaded by
# gpkg. 
# $N = package name, such as autoconf, x-org
# $V = package version, such as 2.6.10

SRC_URI="http://ftp.gnu.org/gnu/gawk/$N-$V.tar.gz"


# Binary package URI.
BIN_URI=""


# Runtime Depend
RDEPEND=""

# Build time depend
DEPEND="${RDEPEND}"

#unpack
xgb_unpack()
{
        #unpard file from $XGPATH_SOURCE to current directory.
        echo "Unpacking to `pwd`"
        tar xf $XGPATH_SOURCE/$N-$V$R.tar.gz
}

#config
xgb_config()
{
        echo "config $N-$V$R..."

        #fist, cd build directory
        cd $N-$V$R

        #second, add package specified config params to XGB_CONFIG
        XGB_CONFIG+=" --libexecdir=/usr/lib "

        #Third, call configure with $XGB_CONFIG
        ./configure $XGB_CONFIG
}

#build
xgb_build()
{
        echo "make $N-$V$R..."

        #run make in current directory
        make
}

#check
xgb_check()
{
        echo "checking $N-$V$R.."
        make check
}

#install
xgb_install()
{
        echo "install to $XGPATH_DEST"

        #install everything to $XGPATH_DEST
        make DESTDIR=$XGPATH_DEST install
}


}}}

= 3. 模板 ==

模板文件在/var/xiange/xglibs/template.xgb, 写新的脚本文件时，只需要拷贝并编辑模板文件即可。